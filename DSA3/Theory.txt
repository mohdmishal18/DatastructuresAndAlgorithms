Topics.....

> tree,application
Ans : 
A tree is a hierarchical data structure consisting of nodes connected by edges.
It's similar to a real-world tree with branches extending from a central trunk. In a tree data structure:

*The topmost node is called the root.
*Each node can have zero or more child nodes.
*Nodes that have the same parent are called siblings.
*A node without children is called a leaf node or a terminal node.

widely used in : 
$File Systems
$Organization Charts
$Binary Search Trees(BSTs)
$HTML DOM

> complete,full,perfect tree
Ans : 

Complete Tree : 
A complete binary tree is a special type of binary tree where every level, except possibly the last, is completely filled.
In the last level, all nodes are as left as possible.
Complete trees are efficient for storage in arrays because the positions of nodes can be easily calculated.
        1
      /   \
     2     3
    / \   /
   4   5 6

Full Tree : 
A full binary tree is a type of binary tree where each node has either 0 or 2 children.
In other words, every node has exactly 0 or 2 children; there are no nodes with only one child.
Full trees are also called proper binary trees or 2-trees.
Full trees are commonly used in binary tree implementations and certain algorithms like binary tree traversals.
        1
      /   \
     2     3
    / \
   4   5

Perfect Tree : 
A perfect binary tree is both complete and full.
It has all levels completely filled with nodes, and every node has either 0 or 2 children.
In a perfect binary tree, the number of nodes doubles at each level, starting from the root.
The number of leaf nodes in a perfect binary tree is equal to the number of internal nodes plus one.
        1
      /   \
     2     3
    / \   / \
   4   5 6   7

> bst O(log n)
Ans : 


> heap O(log n)
> types of graph
> isolated vertex
> weighted graph 
> heapsort O(n)
> trie vs hashtable
> graph indexing
> vertex indexing
> edge indexing
> heigth vs depth of a node
> degree of a node
> shortest path algorithm
> binomeal heap
> BFS and DFS
> self balancing tree
> topdown and bottomup heapification
> how to check bst is a subset of x
> adv of priority queue using heap
> adjecency list and adjecancy matrix
> graph , application ,types
> BST , application ,type
> trie application ,type
> heap , application , type

> Binary Tree
> Closest Path
> Degree of the node Graph
> Graph
> Spanning tree
> Minimum Spanning Tree
> Trie
> Types of Tree
> AVL tree
> B Tree
> Full Tree
> Complete tree
> Perfect tree
> Heap applications
> BFS complexity 
> Shortest path algorithm
> Dijkstra's algorithm 
> Bellman ford algorithm 
> Topology sorting
> Acyclic Travel
> Graph vs tree
> Tree vs trie
> Types of graph
> Complete Graph
> Graph Indexing
> Represent graph in memory
> Cycles in Detection


===============================================
Tree : 

Binary Tree

Types of Tree : 

Full Tree
Complete Tree
Perfect Tree
==============================================
==============================================
Binary Search Tree (BST)
Closest Path
Degree of the Node Graph
BST Applications, Types
AVL Tree
B Tree
Checking if BST is a Subset of X
==============================================
==============================================
Heap
Heap Applications, Types
Heap Operations (e.g., Heapsort, Heapification)
Advantages of Priority Queue using Heap
Top-Down and Bottom-Up Heapification
Binomial Heap
==============================================
==============================================
Trie
Trie vs Hash Table
Trie Applications, Types
==============================================
==============================================
Graph
Types of Graph
Weighted Graph
Complete Graph
Graph Applications, Types
Graph Indexing (Vertex, Edge)
Representing Graph in Memory (Adjacency List, Adjacency Matrix)
BFS and DFS
Shortest Path Algorithms (Dijkstra's, Bellman-Ford)
Topology Sorting
Acyclic Travel
Cycles Detection
Graph vs Tree
Graph vs Trie
==============================================